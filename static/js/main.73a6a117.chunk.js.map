{"version":3,"sources":["Ghost.tsx","SingleBin.tsx","MultiBin.tsx","NestedBins.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["sleep","ms","Promise","resolve","setTimeout","ContentElement","className","style","handleRef","value","ref","React","backgroundColor","color","postProcess","props","defaultPostProcessor","deltaY","current","clientHeight","Content","draggedProps","changeColor","delay","dragProps","onDragStart","document","body","cursor","onDragEnd","isDetached","onDrop","a","method","state","nodeRef","getBoundingClientRect","x","left","right","disabled","withDragProps","isHovered","display","textAlign","position","width","undefined","randomColors","Array","fill","map","randomPart","Math","floor","random","randomColor","GhostExample","i","key","GhostExampleTitle","initialValues","_","SimpleExample","dropped","changeDropped","values","filter","v","indexOf","length","border","join","colors","maxDroppedPerBin","Bin","handleDrop","onFill","droppedCount","changeDroppedCount","validateDragProps","useDroppable","useDragProps","dragPropsValid","filled","added","visibility","top","bottom","background","transition","changeValues","Target","changeValue","children","changeValueFactory","margin","detachDelta","App","to","path","component","SingleBin","MultiBin","NestedBins","Ghost","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73a6a117.chunk.js","sourcesContent":["import * as React from \"react\";\n\nimport {\n  DragDropContainer,\n  Draggable,\n  Droppable,\n  defaultPostProcessor,\n  WithDragProps,\n} from \"react-draggable-hoc\";\n\nconst sleep = (ms?: number) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, ms);\n  });\n};\n\nconst randomColor = () => {\n  const randomPart = () => Math.floor(Math.random() * 255);\n  return \"rgb(\" + randomPart() + \",\" + randomPart() + \",\" + randomPart() + \")\";\n};\n\ntype DraggedPropsType = ReturnType<typeof randomColor>;\n\n// use a separate component to create a ghost\nconst ContentElement = ({ className = \"\", style, handleRef, value }: any) => {\n  const ref = React.useRef(null);\n  return (\n    <span style={style} className={`Cell ${className}`}>\n      <div className=\"handle\" ref={handleRef}>\n        <div className=\"bar\" style={{ backgroundColor: style.color }} />\n        <div className=\"bar\" style={{ backgroundColor: style.color }} />\n        <div className=\"bar\" style={{ backgroundColor: style.color }} />\n      </div>\n      <span ref={ref}>{value}</span>\n    </span>\n  );\n};\n\ninterface IContentProps {\n  value: string;\n  backgroundColor: string;\n  draggedProps?: DraggedPropsType;\n}\n\n// stick to line\nconst postProcess = (props: any, ref: React.RefObject<any>) => {\n  return {\n    ...defaultPostProcessor(props, ref),\n    deltaY: ref && ref.current ? ref.current.clientHeight : 0,\n  };\n};\n\nconst Content = ({ backgroundColor, value, draggedProps }: IContentProps) => {\n  const [color, changeColor] = React.useState<string>();\n\n  return (\n    <Draggable\n      delay={20}\n      dragProps={backgroundColor}\n      postProcess={postProcess}\n      onDragStart={() => {\n        document.body.style.cursor = \"ew-resize\";\n      }}\n      onDragEnd={() => {\n        document.body.style.cursor = \"initial\";\n      }}\n    >\n      {({ handleRef, isDetached }) =>\n        handleRef != null ? (\n          <Droppable\n            onDrop={async ({ dragProps }) => {\n              await sleep(0);\n              if (dragProps !== backgroundColor) {\n                changeColor(dragProps as string);\n              }\n            }}\n            method={(state, nodeRef) => {\n              const a = nodeRef.current.getBoundingClientRect();\n              const { x } = state.current!;\n\n              return a.left <= x && a.right >= x;\n            }}\n            disabled={handleRef == null}\n            withDragProps={false}\n          >\n            {({ isHovered, ref }) => (\n              <div\n                style={{\n                  display: \"inline-block\",\n                  textAlign: \"left\",\n                  position: \"relative\",\n                }}\n                ref={ref}\n              >\n                {/* change text color when element is dragged */}\n                <ContentElement\n                  value={\n                    draggedProps\n                      ? draggedProps === backgroundColor\n                        ? isHovered\n                          ? \"Not here\"\n                          : \"I'm dragged\"\n                        : isHovered\n                        ? \"Drop here\"\n                        : \"Hover me\"\n                      : value\n                  }\n                  style={{\n                    backgroundColor,\n                    color: isDetached ? \"#fff\" : color,\n                    width: \"100px\",\n                  }}\n                  className={\n                    isHovered && draggedProps !== backgroundColor\n                      ? \"hovered\"\n                      : undefined\n                  }\n                  handleRef={handleRef}\n                />\n              </div>\n            )}\n          </Droppable>\n        ) : (\n          <ContentElement\n            value={value}\n            style={{\n              backgroundColor,\n              color,\n              width: \"100px\",\n            }}\n          />\n        )\n      }\n    </Draggable>\n  );\n};\n\nconst randomColors = Array(30)\n  .fill(0)\n  .map(() => randomColor());\n\nexport const GhostExample = () => {\n  return (\n    <DragDropContainer className=\"Ghost-container\">\n      {({ ref }) => (\n        <WithDragProps>\n          {({ dragProps: draggedProps }) => (\n            <div className=\"Ghost-container\" ref={ref}>\n              {randomColors.map((color, i) => (\n                <Content\n                  backgroundColor={color}\n                  value={`Drag me`}\n                  key={i}\n                  draggedProps={draggedProps}\n                />\n              ))}\n            </div>\n          )}\n        </WithDragProps>\n      )}\n    </DragDropContainer>\n  );\n};\n\nexport const GhostExampleTitle = () => (\n  <p>\n    Scrollable container, <br />\n    draggable and droppable elements <br />\n    with a ghost stuck to row bottom <br />\n    custom hover implementation <br />\n    drag handle <br />\n    delay of 20ms (scroll is still preserved) <br />\n    and fixed body <br />\n    ew-resize cursor on drag\n  </p>\n);\n\nexport default () => {\n  React.useEffect(() => {\n    document.body.style.position = \"fixed\";\n\n    return () => {\n      document.body.style.position = \"initial\";\n    };\n  });\n\n  return (\n    <React.Fragment>\n      <GhostExampleTitle />\n      <GhostExample />\n    </React.Fragment>\n  );\n};\n","import * as React from \"react\";\n\nimport { DragDropContainer, Draggable, Droppable } from \"react-draggable-hoc\";\n\nconst initialValues = Array(20)\n  .fill(undefined)\n  .map((_, i) => i + 1);\n\nexport const SimpleExample = () => {\n  const [dropped, changeDropped] = React.useState<number[]>([]);\n  const values = React.useMemo(\n    () => initialValues.filter((v) => dropped.indexOf(v) < 0),\n    [dropped],\n  );\n\n  const onDrop: React.ComponentProps<typeof Droppable>[\"onDrop\"] = ({\n    dragProps,\n  }) => {\n    changeDropped([...dropped, dragProps as number]);\n  };\n\n  return (\n    <DragDropContainer className=\"Simple-page-container\">\n      <div className=\"Simple-row scrollable\">\n        {values.map((i) => (\n          <Draggable key={i} dragProps={i} className=\"Simple-cell\">\n            <div className=\"Cell-simple\">\n              <span className=\"Handle\">::</span>\n              <span>{i}</span>\n            </div>\n          </Draggable>\n        ))}\n      </div>\n      {values.length > 0 ? (\n        <Droppable onDrop={onDrop}>\n          {({ isHovered, ref, dragProps }) => (\n            <div\n              className=\"Simple-bin\"\n              ref={ref}\n              style={{\n                backgroundColor: isHovered\n                  ? \"rgba(0, 130, 20, 0.2)\"\n                  : undefined,\n                border: dragProps ? \"1px dashed #ccc\" : undefined,\n              }}\n            >\n              {dragProps ? \"Drop it here\" : \"Start dragging\"}\n              {values.length > 0 && (\n                <div>Dropped values: [{dropped.join(\", \")}]</div>\n              )}\n            </div>\n          )}\n        </Droppable>\n      ) : (\n        <div className=\"Simple-bin\">Congratulations, You Win!</div>\n      )}\n    </DragDropContainer>\n  );\n};\n\nexport default () => (\n  <React.Fragment>\n    <p>\n      Simple `Draggable` and And a single `Droppable` bin\n      <br />\n    </p>\n    <SimpleExample />\n  </React.Fragment>\n);\n","import * as React from \"react\";\n\nimport {\n  DragDropContainer,\n  Draggable,\n  useDroppable,\n  useDragProps,\n} from \"react-draggable-hoc\";\n\nconst colors = [\"Plum\", \"CornflowerBlue\"];\n\nconst initialValues = Array(colors.length * 10)\n  .fill(undefined)\n  .map((_, i) => i + 1);\n\nconst maxDroppedPerBin = initialValues.length / colors.length;\n\ntype DragProps = {\n  color: \"string\";\n  i: number;\n};\n\nconst Bin = ({\n  handleDrop,\n  color,\n  onFill,\n}: {\n  handleDrop: (props: DragProps) => any;\n  color: string;\n  onFill: () => void;\n}) => {\n  const ref = React.useRef(null);\n  const [droppedCount, changeDroppedCount] = React.useState(0);\n\n  const validateDragProps = React.useCallback(\n    (props: DragProps) => props == null || props.color === color,\n    [color],\n  );\n\n  const { isHovered } = useDroppable(ref, {\n    onDrop: ({ dragProps }) => {\n      if (validateDragProps(dragProps)) {\n        changeDroppedCount(droppedCount + 1);\n        handleDrop(dragProps);\n      }\n    },\n  });\n\n  const dragProps = useDragProps();\n\n  const dragPropsValid = React.useMemo(() => {\n    return validateDragProps(dragProps);\n  }, [dragProps, validateDragProps]);\n\n  const filled = React.useMemo(() => {\n    return (100 * droppedCount) / maxDroppedPerBin;\n  }, [droppedCount]);\n\n  const added = React.useMemo(() => {\n    return isHovered ? 100 / maxDroppedPerBin : 0;\n  }, [isHovered]);\n\n  React.useEffect(() => {\n    if (filled) onFill();\n  }, [filled, onFill]);\n\n  return (\n    <div\n      className=\"Simple-bin\"\n      ref={ref}\n      style={{\n        visibility: dragPropsValid ? undefined : \"hidden\",\n        border: dragProps ? \"1px dashed #ccc\" : \"1px dashed transparent\",\n        position: \"relative\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          display: \"flex\",\n        }}\n      >\n        <div\n          style={{\n            width: `${filled}%`,\n            background: color,\n            transition: \"all linear 40ms\",\n          }}\n        />\n        <div\n          style={{\n            width: `${added}%`,\n            background: `linear-gradient(to right, ${color}, #eee)`,\n            transition: \"all linear 40ms\",\n          }}\n        />\n      </div>\n      <div style={{ position: \"relative\" }}>\n        <span style={{ color }}>{color}</span>\n      </div>\n    </div>\n  );\n};\n\nexport const SimpleExample = () => {\n  const [values, changeValues] = React.useState(initialValues);\n  const [color, changeColor] = React.useState<string>();\n\n  const handleDrop = (dragProps: DragProps) => {\n    changeValues(values.filter((v) => v !== dragProps.i));\n  };\n\n  return (\n    <DragDropContainer className=\"Simple-page-container\">\n      <div className=\"Simple-row scrollable\">\n        {values.map((i) => (\n          <Draggable\n            key={i}\n            dragProps={{ color: colors[i % colors.length], i }}\n            className=\"Simple-cell\"\n          >\n            <div\n              className=\"Cell-simple\"\n              style={{ backgroundColor: colors[i % colors.length] }}\n            >\n              <span style={{ color: \"#fff\" }}>{i}</span>\n            </div>\n          </Draggable>\n        ))}\n      </div>\n      {values.length > 0 ? (\n        <div className=\"Bins-container\">\n          {[...Array(colors.length)].map((_, i) => (\n            <Bin\n              handleDrop={handleDrop}\n              color={colors[i % colors.length]}\n              onFill={() => {\n                if (color == null) changeColor(colors[i % colors.length]);\n              }}\n              key={i}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"Simple-bin\">\n          <span style={{ color }}>Congratulations!</span>\n          <span>You win!</span>\n        </div>\n      )}\n    </DragDropContainer>\n  );\n};\n\nexport default () => (\n  <React.Fragment>\n    <p>\n      Simple `Draggable` and multiple droppable bins defined by `useDroppable`\n      <br />\n    </p>\n    <SimpleExample />\n  </React.Fragment>\n);\n","import * as React from \"react\";\n\nimport { DragDropContainer, Draggable, Droppable } from \"react-draggable-hoc\";\n\nconst Target = ({\n  value,\n  color,\n  changeValue,\n  children,\n}: {\n  value: number;\n  color: string;\n  changeValue: (v: number) => void;\n  children?: any;\n}) => (\n  <Droppable\n    onDrop={() => {\n      changeValue(value);\n    }}\n    withDragProps={false}\n  >\n    {({ isHovered, ref, dragProps }) => (\n      <div\n        className=\"Target\"\n        ref={ref}\n        style={{\n          backgroundColor: isHovered ? \"rgba(0, 0, 110)\" : color,\n          border: dragProps ? \"1px dashed #ccc\" : undefined,\n        }}\n      >\n        {children}\n      </div>\n    )}\n  </Droppable>\n);\n\nexport const SimpleExample = () => {\n  const [value, changeValue] = React.useState(0);\n  const changeValueFactory = (v: number) => () => changeValue(value + v);\n\n  return value < 300 ? (\n    <>\n      <div>Your current score: {value}</div>\n      <DragDropContainer style={{ width: 400, margin: \"auto\" }}>\n        <>\n          <br />\n          <Draggable\n            dragProps=\"missile\"\n            className=\"Missile-Wrapper\"\n            detachDelta={0}\n            onDragStart={() => {\n              document.body.style.cursor = \"grabbing\";\n            }}\n            onDragEnd={() => {\n              document.body.style.cursor = \"initial\";\n            }}\n          >\n            {({ handleRef, isDetached }) => (\n              <div\n                ref={handleRef}\n                className=\"Missile\"\n                style={\n                  handleRef != null && isDetached\n                    ? { visibility: \"hidden\" }\n                    : undefined\n                }\n              />\n            )}\n          </Draggable>\n          <br />\n          <Target\n            value={10}\n            color=\"#f7d916\"\n            changeValue={changeValueFactory(10)}\n          >\n            <div className=\"Target-Value\">10</div>\n            <Target\n              value={25}\n              color=\"#f72116\"\n              changeValue={changeValueFactory(25)}\n            >\n              <div className=\"Target-Value\">25</div>\n              <Target\n                value={50}\n                color=\"#f7d916\"\n                changeValue={changeValueFactory(50)}\n              >\n                <div className=\"Target-Value\">50</div>\n              </Target>\n              <div className=\"Target-Value\">25</div>\n            </Target>\n            <div className=\"Target-Value\">10</div>\n          </Target>\n        </>\n      </DragDropContainer>\n    </>\n  ) : (\n    <div className=\"Congrats-page-container\">Congratulations, You Win!</div>\n  );\n};\n\nexport default () => (\n  <React.Fragment>\n    <p>\n      `Draggable` with hidden host and And nested `Droppable` bins.\n      <br />\n    </p>\n    <SimpleExample />\n  </React.Fragment>\n);\n","import * as React from \"react\";\nimport { NavLink, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport Ghost from \"./Ghost\";\nimport SingleBin from \"./SingleBin\";\nimport MultiBin from \"./MultiBin\";\nimport NestedBins from \"./NestedBins\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">react-draggable-hoc demo</h1>\n          <menu>\n            <NavLink to=\"/demo/singleBin\">Single bin</NavLink>\n            <NavLink to=\"/demo/multiBin\">Multi bin</NavLink>\n            <NavLink to=\"/demo/nestedBins\">Nested bins</NavLink>\n            <NavLink to=\"/demo/ghost\">Complex</NavLink>\n          </menu>\n        </header>\n        <section>\n          <Switch>\n            <Route path=\"/demo/singleBin\" component={SingleBin} />\n            <Route path=\"/demo/multiBin\" component={MultiBin} />\n            <Route path=\"/demo/nestedBins\" component={NestedBins} />\n            <Route path=\"/demo/ghost\" component={Ghost} />\n            <Redirect to=\"/demo/singleBin\" />\n          </Switch>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"raf/polyfill\";\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\nimport { unregister } from \"./registerServiceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\nunregister();\n"],"sourceRoot":""}