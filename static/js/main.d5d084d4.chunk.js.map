{"version":3,"sources":["Ghost.tsx","Simple.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["DragHandle","_ref","color","draggable","react","dist","className","style","backgroundColor","ContentElement","_ref2","_ref2$className","children","_ref2$draggable","concat","Ghost_DragHandle","Content","draggableWrapper","_React$Component","ContentWrapper","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","undefined","isHovered","onDrop","_ref3","dragProps","props","isDragged","setState","onDrag","_ref4","component","_ref5","_ref5$props","x","initialPointer","nodeRect","findDOMNode","getBoundingClientRect","left","pageX","right","inherits","createClass","key","value","_this$props","_this$state","display","textAlign","position","Ghost_ContentElement","transform","zIndex","React","GhostExample","fill","map","_","i","randomPart","Math","floor","random","randomColor","delay","GhostExampleTitle","Ghost","Ghost_GhostExampleTitle","Ghost_GhostExample","SimpleDraggable","y","_ref$style","objectSpread","transition","DroppableWithState","dropped","toConsumableArray","removeItem","canBeUsed","border","join","SimpleExample","_React$Component2","_getPrototypeOf3","_this2","_len2","_key2","values","v","filter","val","Simple_DroppableWithState","SimpleExampleTitle","Simple","Simple_SimpleExampleTitle","Simple_SimpleExample","App","NavLink","to","Switch","Route","path","Redirect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","HashRouter","src_App_0","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d5d084d4.chunk.js","sourcesContent":["import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport {\n  DragDropContainer,\n  draggable as draggableWrapper,\n  DraggableArea,\n  DragMonitor,\n  Droppable,\n  IDraggableProps,\n  IDroppableProps,\n} from 'react-draggable-hoc';\n\nconst randomColor = () => {\n  const randomPart = () => Math.floor(Math.random()*255);\n  return 'rgb('+randomPart()+','+randomPart()+','+randomPart()+')';\n}\n\nconst DragHandle = ({color, draggable} : any) => (\n  <DraggableArea draggable={draggable}>\n    <div className=\"handle\">\n      <div className=\"bar\" style={{backgroundColor: color}} />\n      <div className=\"bar\" style={{backgroundColor: color}} />\n      <div className=\"bar\" style={{backgroundColor: color}} />\n    </div>\n  </DraggableArea>\n)\n  \n// use a separate component to create a ghost\nconst ContentElement = ({ className=\"\", children, draggable = false, style } : any) => (\n  <span\n      style={style}\n      className={`Cell ${className}`}\n  >\n    <DragHandle\n      draggable={draggable}\n      color={style.color}\n    />\n    {children}\n  </span>\n)\n  \ninterface IContentProps {\n  value: string,\n  backgroundColor: string\n}\n  \nconst Content = draggableWrapper(\n  class ContentWrapper extends React.Component<IDraggableProps & IContentProps> {\n    public state = {\n      color: undefined,\n      isHovered: false\n    }\n\n    public onDrop = ({dragProps}: IDroppableProps) => {\n      const state = {isHovered: false} as any;\n      if (!this.props.isDragged && this.state.isHovered) {\n        state.color = dragProps;\n      }\n      this.setState(state);\n    }\n\n    public onDrag = ({isHovered} : IDroppableProps) => {\n      if (this.state.isHovered !== isHovered) {\n        this.setState({isHovered});\n      }\n    }\n\n    public isHovered = (component: React.Component<any>, { props: { x, initialPointer } }: DragMonitor) => {\n      const nodeRect = (findDOMNode(component) as HTMLElement).getBoundingClientRect();\n      return initialPointer != null && nodeRect.left <= initialPointer.pageX + x && nodeRect.right >= initialPointer.pageX + x;\n    }\n\n    public render() {\n      const { x, isDragged, backgroundColor, value} = this.props;\n      const { color, isHovered } = this.state;\n\n      return (\n        <Droppable\n          onDrag={this.onDrag}\n          onDrop={this.onDrop}\n          isHovered={this.isHovered}\n        >\n          <div style={{display: 'inline-block', textAlign: 'left', position: 'relative'}}>\n            {/* create a ghost and position it on drag */}\n            {isDragged && (\n              <ContentElement\n                value={value}\n                style={{\n                  backgroundColor,\n                  color,\n                  position: 'absolute',\n                  transform: `translate3d(${x}px, 100%, -1px)`,\n                  zIndex: 1,\n                }}\n              >\n                <span>{value}</span>\n              </ContentElement>\n            )}\n            {/* change text color when element is dragged */}\n            <ContentElement\n              value={value}\n              style={{\n                backgroundColor, color: isDragged ? 'red' : color\n              }}\n              className={isHovered ? 'hovered' : undefined}\n              draggable={true}\n            >\n              <span>{value}</span>\n            </ContentElement>\n          </div>\n        </Droppable>\n      )\n    }\n  }\n)\n\n\nexport const GhostExample = () => (\n  <DragDropContainer>\n    <div className=\"Ghost-container\">\n      {Array(20).fill(0).map((_, i) => {\n        const color = randomColor();\n        return (\n          <Content\n            backgroundColor={color}\n            value={`Hello ${i}`}\n            key={i}\n            dragProps={color}\n            delay={400}\n            draggable={false}\n          />\n        )\n      })}\n    </div>\n  </DragDropContainer>\n)\n\nexport const GhostExampleTitle = () => (\n  <p>\n    Scrollable container, <br />\n    draggable and droppable elements <br />\n    with a ghost stuck to row bottom <br />\n    custom hover implementation <br />\n    drag handle <br />\n    and a delay of 400ms\n  </p>\n)\n\nexport default () => (\n  <React.Fragment>\n    <GhostExampleTitle />\n    <GhostExample />\n  </React.Fragment>\n)\n","import * as React from 'react';\nimport {\n  DragDropContainer,\n  draggable,\n  Droppable,\n  IDraggableProps,\n  IDroppableProps,\n} from 'react-draggable-hoc';\n\ninterface ISimpleDraggableProps {\n    className?: any,\n    style?: any,\n    value: number,\n}\n\n/**\n * Simple React Component to render a draggable\n * @param param props\n */\nexport const SimpleDraggable = draggable((\n  {value, x, y, isDragged, style={}, className} : ISimpleDraggableProps & IDraggableProps\n) => (\n  <div\n    className={className}\n    style={{\n        ...style,\n        transform: isDragged ? `translate3d(${x}px, ${y}px, -1px)` : undefined,\n        transition: isDragged ? undefined : 'transform 1s'\n    }}\n  >\n    <span>\n      {value}\n    </span>\n  </div>\n));\n\n/**\n * Creates a Droppable container\n */\nclass DroppableWithState extends React.Component<{removeItem: (v: number) => any, canBeUsed: boolean}> {\n  public state = {\n    dragProps: undefined,\n    dropped: [],\n    isHovered: false,\n  }\n\n  public onDrop = ({dragProps} : IDroppableProps) => {\n    this.setState({dropped: [...this.state.dropped, dragProps]});\n    this.props.removeItem(dragProps);\n  }\n\n  public onDrag = (props : IDroppableProps) => {\n    this.setState(props);\n  }\n\n  public render() {\n    const {dragProps, dropped, isHovered,} = this.state;\n    const {canBeUsed} = this.props;\n    return (\n      <Droppable\n        onDrop={this.onDrop}\n        onDrag={this.onDrag}\n      >\n        <div\n          className=\"Simple-bin\"\n          style={{\n            backgroundColor: isHovered ? 'rgba(0, 130, 20, 0.2)' : undefined,\n            border: dragProps != null ? '1px dashed #ccc' : undefined,\n          }}\n        >\n          {dragProps != null ? 'Drop it here' : (canBeUsed ? 'Start dragging' : 'Nothing to drag') } <br />\n          {canBeUsed && dropped.length > 0 && (\n            <p>\n              Dropped values: [{dropped.join(', ')}]\n            </p>\n          )}\n        </div>\n      </Droppable>\n    )\n  }\n}\n\nexport class SimpleExample extends React.Component {\n  public state = {\n    values: [1,2,3,4,5]\n  }\n\n  public removeItem = (v: number) => {\n    this.setState({values: this.state.values.filter((val) => val !== v)});\n  }\n  \n  public render() {\n    return (\n      <DragDropContainer>\n        <div className=\"Simple-container\">\n            <div className=\"Simple-row\">\n              {/* value prop will be used by droppable */}\n              {this.state.values.map((i) => (\n                <SimpleDraggable\n                  className=\"Cell-simple\"\n                  value={i}\n                  key={i}\n                  dragProps={i}\n                />\n              ))}\n            </div>\n            <DroppableWithState\n              canBeUsed={this.state.values.length > 0}\n              removeItem={this.removeItem}\n            />\n        </div>\n      </DragDropContainer>\n    )\n  }\n}\n\nexport const SimpleExampleTitle = () => (\n  <p>\n    Simple Draggable and Droppable<br />\n  </p>\n)\n\nexport default () => (\n  <React.Fragment>\n    <SimpleExampleTitle />\n    <SimpleExample />\n  </React.Fragment>\n)\n","import * as React from 'react';\nimport { NavLink, Redirect, Route, Switch } from 'react-router-dom';\n\nimport Ghost from './Ghost';\nimport Simple from './Simple';\n\nimport './App.css';\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">react-draggable-hoc demo</h1>\n          <menu>\n            <NavLink to=\"/demo/ghost\">Complex</NavLink>\n            <NavLink to=\"/demo/simple\">Simple</NavLink>\n          </menu>\n        </header>\n        <section>\n          <Switch>\n            <Route path=\"/demo/ghost\" component={Ghost} />\n            <Route path=\"/demo/simple\" component={Simple} />\n            <Redirect to=\"/demo/simple\" />\n          </Switch>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'raf/polyfill';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\n\nimport App from './App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}