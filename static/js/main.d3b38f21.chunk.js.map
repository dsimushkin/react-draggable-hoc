{"version":3,"sources":["Ghost.tsx","Simple.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["ContentElement","className","style","handleRef","value","ref","React","useDragStopPropagation","backgroundColor","color","postProcess","props","defaultPostProcessor","deltaY","current","clientHeight","Content","changeColor","delay","dragProps","onDragStart","document","body","cursor","onDragEnd","isDetached","onDrop","method","state","nodeRef","defaultMethod","a","getBoundingClientRect","x","left","right","isHovered","display","textAlign","position","width","undefined","GhostExample","Array","fill","map","_","i","randomPart","Math","floor","random","randomColor","key","GhostExampleTitle","initialValues","SimpleExample","dropped","changeDropped","values","filter","v","indexOf","border","length","join","App","to","path","component","Ghost","Simple","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3b38f21.chunk.js","sourcesContent":["import * as React from \"react\";\n\nimport {\n  DragDropContainer,\n  Draggable,\n  Droppable,\n  defaultPostProcessor,\n  useDragStopPropagation,\n} from \"react-draggable-hoc\";\n\nconst randomColor = () => {\n  const randomPart = () => Math.floor(Math.random() * 255);\n  return \"rgb(\" + randomPart() + \",\" + randomPart() + \",\" + randomPart() + \")\";\n};\n\n// use a separate component to create a ghost\nconst ContentElement = ({ className = \"\", style, handleRef, value }: any) => {\n  const ref = React.useRef(null);\n  useDragStopPropagation(ref, \"dragStart\");\n  return (\n    <span style={style} className={`Cell ${className}`} ref={handleRef}>\n      <div className=\"handle\">\n        <div className=\"bar\" style={{ backgroundColor: style.color }} />\n        <div className=\"bar\" style={{ backgroundColor: style.color }} />\n        <div className=\"bar\" style={{ backgroundColor: style.color }} />\n      </div>\n      <span ref={ref}>{value}</span>\n    </span>\n  );\n};\n\ninterface IContentProps {\n  value: string;\n  backgroundColor: string;\n}\n\n// stick to line\nconst postProcess = (props: any, ref: React.RefObject<any>) => {\n  return {\n    ...defaultPostProcessor(props, ref),\n    deltaY: ref && ref.current ? ref.current.clientHeight : 0,\n  };\n};\n\nconst Content = ({ backgroundColor, value }: IContentProps) => {\n  const [color, changeColor] = React.useState<string>();\n\n  return (\n    <Draggable\n      delay={100}\n      dragProps={backgroundColor}\n      postProcess={postProcess}\n      onDragStart={() => {\n        document.body.style.cursor = \"ew-resize\";\n      }}\n      onDragEnd={() => {\n        document.body.style.cursor = \"initial\";\n      }}\n    >\n      {({ handleRef, isDetached }) =>\n        handleRef != null ? (\n          <Droppable\n            onDrop={({ dragProps }) => {\n              if (dragProps !== backgroundColor) {\n                changeColor(dragProps as string);\n              }\n            }}\n            method={(state, nodeRef, defaultMethod) => {\n              const a = nodeRef.current.getBoundingClientRect();\n              const { x } = state.current!;\n\n              return a.left <= x && a.right >= x;\n            }}\n          >\n            {({ isHovered, dragProps, ref }) => (\n              <div\n                style={{\n                  display: \"inline-block\",\n                  textAlign: \"left\",\n                  position: \"relative\",\n                }}\n                ref={ref}\n              >\n                {/* change text color when element is dragged */}\n                <ContentElement\n                  value={\n                    dragProps\n                      ? dragProps === backgroundColor\n                        ? isHovered\n                          ? \"Not here\"\n                          : \"I'm dragged\"\n                        : isHovered\n                        ? \"Drop here\"\n                        : \"Hover me\"\n                      : value\n                  }\n                  style={{\n                    backgroundColor,\n                    color: isDetached ? \"#fff\" : color,\n                    width: \"100px\",\n                  }}\n                  className={\n                    isHovered && dragProps !== backgroundColor\n                      ? \"hovered\"\n                      : undefined\n                  }\n                  handleRef={handleRef}\n                />\n              </div>\n            )}\n          </Droppable>\n        ) : (\n          <ContentElement\n            value={value}\n            style={{\n              backgroundColor,\n              color,\n              width: \"100px\",\n            }}\n          />\n        )\n      }\n    </Draggable>\n  );\n};\n\nexport const GhostExample = () => (\n  <DragDropContainer className=\"Ghost-container\">\n    {({ ref }) => (\n      <div className=\"Ghost-container\" ref={ref}>\n        {Array(60)\n          .fill(0)\n          .map((_, i) => {\n            const color = randomColor();\n            return (\n              <Content backgroundColor={color} value={`Drag me`} key={i} />\n            );\n          })}\n      </div>\n    )}\n  </DragDropContainer>\n);\n\nexport const GhostExampleTitle = () => (\n  <p>\n    Scrollable container, <br />\n    draggable and droppable elements <br />\n    with a ghost stuck to row bottom <br />\n    custom hover implementation <br />\n    drag handle <br />\n    and a delay of 100ms <br />\n    ew-resize cursor on drag\n  </p>\n);\n\nexport default () => (\n  <React.Fragment>\n    <GhostExampleTitle />\n    <GhostExample />\n  </React.Fragment>\n);\n","import * as React from \"react\";\n\nimport { DragDropContainer, Draggable, Droppable } from \"react-draggable-hoc\";\n\nconst initialValues = Array(20)\n  .fill(undefined)\n  .map((_, i) => i + 1);\n\nexport const SimpleExample = () => {\n  const [dropped, changeDropped] = React.useState<number[]>([]);\n  const values = React.useMemo(\n    () => initialValues.filter(v => dropped.indexOf(v) < 0),\n    [dropped],\n  );\n\n  const onDrop: React.ComponentProps<typeof Droppable>[\"onDrop\"] = ({\n    dragProps,\n  }) => {\n    changeDropped([...dropped, dragProps as number]);\n  };\n\n  return (\n    <DragDropContainer className=\"Simple-page-container\">\n      <div className=\"Simple-row scrollable\">\n        {values.map(i => (\n          <Draggable key={i} dragProps={i} className=\"Simple-cell\">\n            <div className=\"Cell-simple\">\n              <span className=\"Handle\">::</span>\n              <span>{i}</span>\n            </div>\n          </Draggable>\n        ))}\n      </div>\n      <Droppable onDrop={onDrop}>\n        {({ isHovered, ref, dragProps }: any) => (\n          <div\n            className=\"Simple-bin\"\n            ref={ref}\n            style={{\n              backgroundColor: isHovered ? \"rgba(0, 130, 20, 0.2)\" : undefined,\n              border: dragProps ? \"1px dashed #ccc\" : undefined,\n            }}\n          >\n            {values.length > 0\n              ? dragProps\n                ? \"Drop it here\"\n                : \"Start dragging\"\n              : \"Congratulations, You Win!\"}\n            {values.length > 0 && (\n              <div>Dropped values: [{dropped.join(\", \")}]</div>\n            )}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContainer>\n  );\n};\n\nexport default () => (\n  <React.Fragment>\n    <p>\n      Simple Draggable and Droppable\n      <br />\n    </p>\n    <SimpleExample />\n  </React.Fragment>\n);\n","import * as React from \"react\";\nimport { NavLink, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport Ghost from \"./Ghost\";\nimport Simple from \"./Simple\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">react-draggable-hoc demo</h1>\n          <menu>\n            <NavLink to=\"/demo/ghost\">Complex</NavLink>\n            <NavLink to=\"/demo/simple\">Simple</NavLink>\n          </menu>\n        </header>\n        <section>\n          <Switch>\n            <Route path=\"/demo/ghost\" component={Ghost} />\n            <Route path=\"/demo/simple\" component={Simple} />\n            <Redirect to=\"/demo/simple\" />\n          </Switch>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"raf/polyfill\";\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\nimport { unregister } from \"./registerServiceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\nunregister();\n"],"sourceRoot":""}